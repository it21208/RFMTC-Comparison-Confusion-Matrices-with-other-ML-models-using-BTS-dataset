{
    "collab_server" : "",
    "contents" : "options(warn = -1) # 0\n\n# installs and loads the packages needed automatically\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(caret, SDMTools, e1071, party, randomForest,\n               kernlab, lattice, klaR, rpart, class, cluster, stats,\n               KernelKnn, pls, gdata, nnet, glmnet, mda, MASS, C50,\n               RWeka, C50,  RWeka, adabag, mlbench, ipred, Cubist, ada)\n\n# ---------------------- Install Packages Manually If Needed -----------------------------------\n# install.packages(\"e1071\"); install.packages(\"SDMTools\"); install.packages(\"caret\"); install.packages(\"randomForest\"); \n# install.packages(\"kernlab\"); install.packages(\"party\"); install.packages(\"lattice\"); install.packages(\"class\");\n\n# ---------------------- Load Libraries Manually If Needed -----------------------------------\n# library(caret); library(SDMTools); library(e1071); library(party); library(randomForest); library(kernlab); library(lattice); \n# library(klaR); library(rpart); library(class); library(cluster)\n\n# read training and test results of the RFMTC model using the optimal initial params given by I-Cheng Yeh\nRFMTC_REF_BTS_TRAINING  = read.csv(file = \"REF_RFMTC_TRAINING.csv\", header = TRUE, sep = \",\")\nRFMTC_REF_BTS_TEST  = read.csv(file = \"REF_RFMTC_TEST.csv\", header = TRUE, sep = \",\")\n\n# extract the observed values and the predicted values\nEXL_L1_RFMTC_REF_BTS_TRAINING = RFMTC_REF_BTS_TRAINING[, c(\"Churn..0.1.\", \"E.X.L..L.1.\")]\nEXL_L1_RFMTC_REF_BTS_TEST = RFMTC_REF_BTS_TEST[, c(\"Churn..0.1.\", \"E.X.L..L.1.\")]\n\n# round the predicted values\nROUNDED_EXL_L1_RFMTC_REF_BTS_TRAINING = round(EXL_L1_RFMTC_REF_BTS_TRAINING[, c(\"E.X.L..L.1.\")])\nROUNDED_EXL_L1_RFMTC_REF_BTS_TEST = round(EXL_L1_RFMTC_REF_BTS_TEST[, c(\"E.X.L..L.1.\")])\n\n# calculate the confusion matrices for the RFMTC\nRFMTC_confusionMatrix_Training = confusion.matrix(RFMTC_REF_BTS_TRAINING[, c(\"Churn..0.1.\")],\n                                                  ROUNDED_EXL_L1_RFMTC_REF_BTS_TRAINING,\n                                                  threshold = 0.5)\nRFMTC_confusionMatrix_Test = confusion.matrix(RFMTC_REF_BTS_TEST[, c(\"Churn..0.1.\")],\n                                              ROUNDED_EXL_L1_RFMTC_REF_BTS_TEST,\n                                              threshold = 0.5)\nRFMTCaccuracy <- sum(diag(RFMTC_confusionMatrix_Test)) / sum(RFMTC_confusionMatrix_Test)\n\n# print the confusion matrices for the RFMTC model\nprint(\"1.Confusion Matrix for the RFMTC predictions using the training set of the Blood Transfusion dataset\")\nprint(RFMTC_confusionMatrix_Training)\nprint(\"-----------------------------------------------------------------------------------------------------------\")\nprint(\"2.Confusion Matrix for the RFMTC predictions using the test set of the Blood Transfusion dataset\")\nprint(RFMTC_confusionMatrix_Test)\ncat(\"Accuracy: %s\", RFMTCaccuracy);cat(\"\\n\");\nprint(\"-----------------------------------------------------------------------------------------------------------\")\n\n# train and test set in the format needed from the rest of the algorithms\ntrainset = RFMTC_REF_BTS_TRAINING[2:6]\ntestset = RFMTC_REF_BTS_TEST[2:5]\n\n# SVM\nsvm.model <- svm(Churn..0.1. ~ ., data = trainset)\nsvm.pred  <- predict(svm.model, testset)\nrounded.svm.pred = round(svm.pred)\nSVM_confusionMatrix_Test = confusion.matrix(RFMTC_REF_BTS_TEST[, c(\"Churn..0.1.\")], rounded.svm.pred, threshold = 0.5)\nSVMaccuracy <- sum(diag(SVM_confusionMatrix_Test)) / sum(SVM_confusionMatrix_Test)\nprint(\"3.Confusion Matrix for the SVM model predictions\")\nprint(SVM_confusionMatrix_Test)\ncat(\"Accuracy: %s\", SVMaccuracy);cat(\"\\n\");\nprint(\"-----------------------------------------------------------------------------------------------------------\")\n\n# KSVM\nksvm.model <- ksvm(Churn..0.1. ~ ., data = trainset)\nksvm.pred  <- predict(ksvm.model, testset)\nrounded.ksvm.pred = round(ksvm.pred)\nKSVM_confusionMatrix_Test = confusion.matrix(RFMTC_REF_BTS_TEST[, c(\"Churn..0.1.\")], rounded.ksvm.pred, threshold = 0.5)\nKSVMaccuracy <- sum(diag(KSVM_confusionMatrix_Test)) / sum(KSVM_confusionMatrix_Test)\nprint(\"4.Confusion Matrix for the KSVM model predictions\")\nprint(KSVM_confusionMatrix_Test)\ncat(\"Accuracy: %s\", KSVMaccuracy);cat(\"\\n\");\nprint(\"-----------------------------------------------------------------------------------------------------------\")\n\n# Random forest\nrandomforest.model <- randomForest(Churn..0.1. ~ ., data = trainset, importance = TRUE, proximity = TRUE)\nrandomforest.pred  <- predict(randomforest.model, testset)\nrounded.randomforest.pred = round(randomforest.pred)\nRF_confusionMatrix_Test = confusion.matrix(RFMTC_REF_BTS_TEST[, c(\"Churn..0.1.\")], rounded.randomforest.pred, threshold = 0.5)\nRFaccuracy <- sum(diag(RF_confusionMatrix_Test)) / sum(RF_confusionMatrix_Test)\nprint(\"5.Confusion Matrix for the Random Forest algorithm predictions\")\nprint(RF_confusionMatrix_Test)\ncat(\"Accuracy: %s\", RFaccuracy);cat(\"\\n\");\nprint(\"-----------------------------------------------------------------------------------------------------------\")\n\n# NaÃ¯ve Bayes\nnaive.bayes.model <- naiveBayes(as.factor(Churn..0.1.) ~ ., data = trainset)\nnaive.bayes.pred <- predict(naive.bayes.model, newdata = testset)\nNaiveBayes_confusionMatrix_Test = confusion.matrix(RFMTC_REF_BTS_TEST[, c(\"Churn..0.1.\")],\n                                                   as.numeric(as.character(naive.bayes.pred)),\n                                                   threshold = 0.5)\nNaiveBayesaccuracy <- sum(diag(NaiveBayes_confusionMatrix_Test)) / sum(NaiveBayes_confusionMatrix_Test)\nprint(\"6.Confusion Matrix for the Naive Bayes model predictions\")\nprint(NaiveBayes_confusionMatrix_Test)\ncat(\"Accuracy: %s\", NaiveBayesaccuracy);cat(\"\\n\");\nprint(\"-----------------------------------------------------------------------------------------------------------\")\n\n# CARET\nRegressionTreeMethod.model <- rpart(Churn..0.1. ~ ., data = trainset, method = \"anova\")\nRegressionTreeMethod.pred <- predict(RegressionTreeMethod.model, newdata = testset)\nRegressionTreeMethod_confusionMatrix_Test = confusion.matrix(RFMTC_REF_BTS_TEST[,c(\"Churn..0.1.\")],\n                                                             RegressionTreeMethod.pred,\n                                                             threshold = 0.5)\nCARTaccuracy <- sum(diag(RegressionTreeMethod_confusionMatrix_Test)) / sum(RegressionTreeMethod_confusionMatrix_Test)\nprint(\"7.Confusion Matrix for the CARET model predictions\")\nprint(RegressionTreeMethod_confusionMatrix_Test)\ncat(\"Accuracy: %s\", CARTaccuracy);cat(\"\\n\");\nprint(\"-----------------------------------------------------------------------------------------------------------\")\n# K- Nearest Neighbors\ny = trainset[, ncol(trainset)]\ntemp_testset = RFMTC_REF_BTS_TEST[2:6]\nknn.model.pred = KernelKnn(trainset, TEST_data = temp_testset, y, k = 2 , method = 'euclidean', regression = TRUE, Levels = 2)\nrounded_knn.pred = round(knn.model.pred)\nknn.model_confusionMatrix_Test = confusion.matrix(RFMTC_REF_BTS_TEST[,c(\"Churn..0.1.\")], rounded_knn.pred, threshold = 0.5)\nKNNaccuracy <- sum(diag(knn.model_confusionMatrix_Test)) / sum(knn.model_confusionMatrix_Test)\nprint(\"8.Confusion Matrix for the K- Nearest Neighbors model predictions\")\nprint(knn.model_confusionMatrix_Test)\ncat(\"Accuracy: %s\", KNNaccuracy);cat(\"\\n\");\nprint(\"-----------------------------------------------------------------------------------------------------------\")\n# K-Means\nKMeans.model <- kmeans(testset, 2)\nKMeans.pred <- as.numeric(unlist(KMeans.model[1]))\nKMeans.pred[KMeans.pred == 2] <- 0\nKMeans_confusionMatrix_Test = confusion.matrix(RFMTC_REF_BTS_TEST[,c(\"Churn..0.1.\")], KMeans.pred, threshold = 0.5)\nKMeansaccuracy <- sum(diag(KMeans_confusionMatrix_Test)) / sum(KMeans_confusionMatrix_Test)\nprint(\"9.Confusion Matrix for the K-Means model predictions\")\nprint(KMeans_confusionMatrix_Test)\ncat(\"Accuracy: %s\", KMeansaccuracy);cat(\"\\n\");\nprint(\"-----------------------------------------------------------------------------------------------------------\")\n# Flexible Discriminant Analysis\nctree.model <- ctree(Churn..0.1. ~ ., data = trainset, controls = ctree_control(minsplit = 2,minbucket = 2,testtype = \"Univariate\"))\nctree.pred <- predict(ctree.model, testset)\nrounded_ctree.pred <- round(ctree.pred)\nctree_confusionMatrix_Test = confusion.matrix(RFMTC_REF_BTS_TEST[,c(\"Churn..0.1.\")], rounded_ctree.pred, threshold = 0.5)\nctreeaccuracy <- sum(diag(ctree_confusionMatrix_Test)) / sum(ctree_confusionMatrix_Test)\nprint(\"10.Confusion Matrix for the Flexible Discriminant Analysis model predictions\")\nprint(ctree_confusionMatrix_Test)\ncat(\"Accuracy: %s\", ctreeaccuracy);cat(\"\\n\");\nprint(\"-----------------------------------------------------------------------------------------------------------\")\n# Model Trees\nM5P.model <- M5P(Churn..0.1. ~ ., data = trainset)\nM5P.pred <- predict(M5P.model, testset)\nM5P.rounded_ctree.pred <- round(M5P.pred)\nM5P_confusionMatrix_Test = confusion.matrix(RFMTC_REF_BTS_TEST[,c(\"Churn..0.1.\")], rounded_ctree.pred, threshold = 0.5)\nM5Paccuracy <- sum(diag(M5P_confusionMatrix_Test)) / sum(M5P_confusionMatrix_Test)\nprint(\"11.Confusion Matrix for the Model Trees model predictions\")\nprint(M5P_confusionMatrix_Test)\ncat(\"Accuracy: %s\", M5Paccuracy);cat(\"\\n\");\nprint(\"-----------------------------------------------------------------------------------------------------------\")\n# Boosted C5.0\nC5.0.model <- C5.0(as.factor(Churn..0.1.) ~ ., data = trainset,  rules = TRUE)\nC5.0.pred <- predict(C5.0.model, testset)\nC5.0_confusionMatrix_Test = confusion.matrix(RFMTC_REF_BTS_TEST[,c(\"Churn..0.1.\")], C5.0.pred, threshold = 0.5)\nC50accuracy <- sum(diag(C5.0_confusionMatrix_Test)) / sum(C5.0_confusionMatrix_Test)\nprint(\"12.Confusion Matrix for the Boosted C5.0 model predictions\")\nprint(C5.0_confusionMatrix_Test)\ncat(\"Accuracy: %s\", C50accuracy);cat(\"\\n\");\nprint(\"-----------------------------------------------------------------------------------------------------------\")\n# LDA\nlda.model <- lda(Churn..0.1.~., data = trainset)\nlda.pred <- predict(lda.model, testset)\nlda_confusionMatrix_Test = confusion.matrix(RFMTC_REF_BTS_TEST[,c(\"Churn..0.1.\")], unlist(lda.pred[1]), threshold = 0.5)\nlda.accuracy <- sum(diag(lda_confusionMatrix_Test)) / sum(lda_confusionMatrix_Test)\nprint(\"13.Confusion Matrix for the LDA model predictions\")\nprint(lda_confusionMatrix_Test)\ncat(\"Accuracy: %s\", lda.accuracy);cat(\"\\n\");\nprint(\"-----------------------------------------------------------------------------------------------------------\")\n#  Rule System\nM5Rules.model <- M5Rules(Churn..0.1. ~ ., data = trainset)\nM5Rules.pred <- predict(M5Rules.model, testset)\nrounded_M5Rules.pred = round(M5Rules.pred)\nM5Rules_confusionMatrix_Test = confusion.matrix(RFMTC_REF_BTS_TEST[, c(\"Churn..0.1.\")], rounded_M5Rules.pred, threshold = 0.5)\nM5R.accuracy <- sum(diag(M5Rules_confusionMatrix_Test)) / sum(M5Rules_confusionMatrix_Test)\nprint(\"14.Confusion Matrix for the Rule System model predictions\")\nprint(M5Rules_confusionMatrix_Test)\ncat(\"Accuracy: %s\", M5R.accuracy);cat(\"\\n\");\nprint(\"-----------------------------------------------------------------------------------------------------------\")\n# Partial Least Squares \n# prepare train test and fix column names\nplsda.model <- plsda(trainset[,1:4], as.factor(trainset[,5]), probMethod = \"Bayes\")\nplsda.pred <- predict(plsda.model, testset)\nplsda_confusionMatrix_Test = confusion.matrix(RFMTC_REF_BTS_TEST[, c(\"Churn..0.1.\")], plsda.pred, threshold = 0.5)\nplsda.accuracy <- sum(diag(plsda_confusionMatrix_Test)) / sum(plsda_confusionMatrix_Test)\nprint(\"15.Confusion Matrix for the Partial Least Squares model predictions\")\nprint(plsda_confusionMatrix_Test)\ncat(\"Accuracy: %s\", plsda.accuracy);cat(\"\\n\");\nprint(\"-----------------------------------------------------------------------------------------------------------\")\n\n# Ada for Stochastic Boosting\nada.model = ada(as.matrix(trainset[,1:4]), as.factor(trainset[,5]))\nada.pred = predict(ada.model, testset)\nada_confusionMatrix_Test = confusion.matrix(RFMTC_REF_BTS_TEST[, c(\"Churn..0.1.\")], ada.pred, threshold = 0.5)\nada.accuracy <- sum(diag(ada_confusionMatrix_Test)) / sum(ada_confusionMatrix_Test)\nprint(\"16.Confusion Matrix for the Ada Stochastic Boosting model predictions\")\nprint(ada_confusionMatrix_Test)\ncat(\"Accuracy: %s\", ada.accuracy);cat(\"\\n\");\nprint(\"-----------------------------------------------------------------------------------------------------------\")\n\n# RFM \nRFM_OUR_BTS_TRAINING  = read.csv(file = \"OUR_RFM_TRAINING.csv\", header = TRUE, sep = \",\")\nRFM_OUR_BTS_TEST  = read.csv(file = \"OUR_RFM_TEST.csv\", header = TRUE, sep = \",\")\n\nRFM_RESP_PROB_OUR_BTS_TRAINING = RFM_OUR_BTS_TRAINING[, c(\"Churn..0.1.\", \"RFM.Resp.Prob\")]\nRFM_RESP_PROB_OUR_BTS_TEST = RFM_OUR_BTS_TEST[, c(\"Churn..0.1.\", \"RFM.Resp.Prob\")]\n\n# round the predicted values\nROUNDED_RFM_RESP_PROB_OUR_BTS_TRAINING = round(RFM_RESP_PROB_OUR_BTS_TRAINING[, c(\"RFM.Resp.Prob\")])\nROUNDED_RFM_RESP_PROB_OUR_BTS_TEST = round(RFM_RESP_PROB_OUR_BTS_TEST[, c(\"RFM.Resp.Prob\")])\n\n# calculate the confusion matrices for the RFM\nRFM_confusionMatrix_Training = confusion.matrix(RFM_OUR_BTS_TRAINING[, c(\"Churn..0.1.\")],\n                                                  ROUNDED_RFM_RESP_PROB_OUR_BTS_TRAINING,\n                                                  threshold = 0.5)\nRFM_confusionMatrix_Test = confusion.matrix(RFM_OUR_BTS_TEST[, c(\"Churn..0.1.\")],\n                                              ROUNDED_RFM_RESP_PROB_OUR_BTS_TEST,\n                                              threshold = 0.5)\nRFMTC.accuracy.test <- sum(diag(RFM_confusionMatrix_Test)) / sum(RFM_confusionMatrix_Test)\nprint(\"17.Confusion Matrix for the RFM model predictions\")\nprint(RFM_confusionMatrix_Test)\ncat(\"Accuracy: %s\", RFMTC.accuracy.test);cat(\"\\n\");\nprint(\"-----------------------------------------------------------------------------------------------------------\")\n\n\n# WRFM \nWRFM_OUR_BTS_TEST  = read.csv(file = \"OUR_WRFM_TEST.csv\", header = TRUE, sep = \",\")\nWRFM_RESP_PROB_OUR_BTS_TEST = WRFM_OUR_BTS_TEST[, c(\"Churn..0.1.\", \"RFM.Resp.Prob\")]\nROUNDED_WRFM_RESP_PROB_OUR_BTS_TEST = round(WRFM_RESP_PROB_OUR_BTS_TEST[, c(\"RFM.Resp.Prob\")])\nWRFM_confusionMatrix_Test = confusion.matrix(WRFM_OUR_BTS_TEST[, c(\"Churn..0.1.\")],\n                                              ROUNDED_WRFM_RESP_PROB_OUR_BTS_TEST,\n                                              threshold = 0.5)\nWRFM.accuracy.test <- sum(diag(WRFM_confusionMatrix_Test)) / sum(WRFM_confusionMatrix_Test)\nprint(\"18.Confusion Matrix for the WRFM model predictions\")\nprint(WRFM_confusionMatrix_Test)\ncat(\"Accuracy: %s\", WRFM.accuracy.test);cat(\"\\n\");\nprint(\"-----------------------------------------------------------------------------------------------------------\")\n\n\n# Dimensionality Reduction Algorithms\npca <- princomp(~ ., data = trainset)\ntrain_reduced  <- predict(pca, trainset)\ntemp_testset <- RFMTC_REF_BTS_TEST[2:6]\ntest_reduced  <- predict(pca, temp_testset)\nprint(\"17.Show the Importance of each feature (head()) for each record with the Dimensionality Reduction Algorithms model predictions\")\nprint(head(test_reduced))\ncat(\"\\n\")\n",
    "created" : 1498652536902.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1037948102",
    "id" : "66207EA6",
    "lastKnownWriteTime" : 1498861890,
    "last_content_update" : 1498861890677,
    "path" : "~/R/Projects/RFMTC Comparison (Confusion Matrices) with other ML models using BTS-dataset/RFMTC Blood Transfusion Comparison (Confusion Matrices) SVM, Random Forest, Naive Bayes, kNN.R",
    "project_path" : "RFMTC Blood Transfusion Comparison (Confusion Matrices) SVM, Random Forest, Naive Bayes, kNN.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}